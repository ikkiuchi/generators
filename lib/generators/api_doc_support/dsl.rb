module Generators::ApiDocSupport
  module DSL
    def self.included(base)
      base.extend Generators::ApiDocSupport::ClassMethods
    end
  end

  module ClassMethods
    include Generators::Helpers

    def api action, summary = '', http: nil, builder: nil, skip: [ ], use: [ ], &block
      super(action, summary, http: http, builder: builder, skip: skip, use: use, &block)
      (@api_actions ||= { })[action] = { skip: skip, use: use, **(@path || { }) }
      @path = nil
    end

    def scope scope_path
      @scope = scope_path
    end

    %i[ get post patch put delete ].each do |verb|
      define_method verb do |path|
        @path = { path: path, verb: verb }
      end
    end

    def match
      # TODO
    end

    def g
      ctrl_path = "app/controllers/#{@route_base}_controller.rb"
      spdoc_path = "app/_docs/rspec_docs/#{@route_base.sub('api/', '')}_spdoc.rb"

      write :Controller, controller_rb.sub("\n\nend", "\nend"), to: ctrl_path
      write :SpecDoc, spdoc_rb, to: spdoc_path
      print_routes
    end

    def controller_rb
      <<~CTRL
        # *** Generated by Zero [ please make sure that you have checked this file ] ***

        class #{@route_base.camelize}Controller < Api::#{@route_base.split('/')[1].upcase}::BaseController
          include ActiveRecordErrorsRescuer
          #{add_ind_to skip_token}
          #{add_ind_to api_actions}
        end
      CTRL
    end

    def skip_token
      skip = @api_actions.clone.keep_if { |_key, info| info[:skip].include?('Token') }.keys
      return "XXX\n" if skip.blank?
      "skip_token only: #{pr(skip)}\n"
    end

    def api_actions
      @api_actions.keys.map do |action|
        model = @route_base.split('/').last.singularize.camelize
        impl = case action
          when :index   then "@data = #{model}"
          when :show    then "@datum = @#{model.underscore}"
          when :create  then "#{model}.create! permitted"
          when :update  then "#{model}.update! permitted"
          when :destroy then "@status = @#{model.underscore}.destroy"
          else '# TODO'
        end

        <<~ACTION
          def #{action}
            #{impl}
          end
        ACTION
      end.join("\n")
    end

    def describes
      @api_actions.keys.map do |action|
        <<~DESC
          describe :#{action} do
            # TODO
          end
        DESC
      end.join("\n")
    end

    def spdoc_rb
      <<~SPD
        # *** Generated by Zero [ please make sure that you have checked this file ] ***

        class #{@route_base.camelize}Spdoc < RequestSpdoc
          #{add_ind_to describes}
        end
      SPD
    end

    def print_routes
      puts '    please make sure you have created the appropriate route, like this:'.yellow
      @api_actions.each do |action, info|
        next if (path = info[:path]).nil?
        to = path.split('/').last.to_sym == action ? '' : ", to: '#{@route_base.split('/').last}##{action}'"
        puts "      #{info[:verb]} '#{path}'#{to}"
      end
    end
  end
end
